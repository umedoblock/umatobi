# umatobiAlgo.txt
# Copyright (C) 2008 梅どぶろく umedoblock

分散ハッシュテーブルアルゴリズム：馬跳び
 keyを基に完全な一次元トーラスが完成していると仮定しての話になります。 
(keyを基に完全な一次元トーラスを作るのは難しくない) 
このとき各ノードは自分のすぐ両隣のノードは必ずわかっている。 
このとき、問い合わせに方向性を持たせるため、時計回りの方向に問い合わせを行うものとする。 

各ノードは、自分の1個隣のノードに、あなたにとって1個隣のノードを教えてと問い合わせる。 
このとき、1個隣のノードが教えてくれた1個隣のノードにとって1個隣のノードは、自分にとって2個隣のノードである。 
先ほどと同じようにして、 
各ノードは、自分の2個隣のノードに、あなたにとって2個隣のノードを教えてと問い合わせる。 
このとき、2個隣のノードが教えてくれた2個隣のノードにとって2個隣のノードは、自分にとって4個隣のノードである。 
さらに同じようにして 
各ノードは、自分の4個隣のノードに、あなたにとって4個隣のノードを教えてと問い合わせる。 
このとき、4個隣のノードが教えてくれた4個隣のノードにとって4個隣のノードは、自分にとって8個隣のノードである。 
さらに、さらに、 
各ノードは、自分の8個隣のノードに、あなたにとって8個隣のノードを教えてと問い合わせる。 
このとき、8個隣のノードが教えてくれた8個隣のノードにとって8個隣のノードは、自分にとって16個隣のノードである。 
・・・以下延々と続く 
ここの部分は自分で紙に書いて実際にやってみるとよく分かります。 
一般化すれば 
各ノードは自分のＡｎ個隣のノードに、あなたにとってAn個隣のノードを教えてと問い合わせる。 
このとき、An個隣のノードが教えてくれたAn個隣のノードにとってAn個隣のノードは、自分に 
とってA(n+1)(=2*An)個隣のノードである。 
ただし、A1 = 1　かつ　n>=1 

理由： 
一次元トーラスを作ることは簡単 
隣のノードの隣の・・・と問い合わせていくことも簡単 
簡単なことの組み合わせにより、DHTの実装もとてつもなく簡単になります。 
さらに、参加ノード数をNとすると検索量はO(logN)です。 
検索量も理想値通りとなります。 
あるkeyを検索することと、あるkeyを範囲に含むノードを見つけることは 
同値ですので、ネットワークが完成しているところに新しくノードが参加しようとした場合にもO(logn)のコストで新しいノードが参加することが出来ます。 

自分が責任を持つハッシュ値の範囲は一次元トーラスの半円です。

