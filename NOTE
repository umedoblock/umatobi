# umatobi simulator
#
# Copyright (c) 2012-2019 梅濁酒(=umedoblock)
#
# This software is released under the MIT License.
# https://github.com/umedoblock/umatobi

Copyright (c) 2012-2019 梅濁酒(umedoblock)
#########################################################################

umatobi simulattor を使用すると、multi processes / threads の
動作環境を容易に構築できます。

umatobi simulation では、以下の通り大きく分けて二つの段階があります。

    1. simulation を実行し、実行結果を SQL として、simulation.db に残す段階
    2. simulation.db を元に、simulation 結果をOpenGLにて描画する段階

各段階では、

    node, darkness, client, watson, theater, screen

が互いに関係し、各々の任務を全うします。

= node, darkness, client, watson, theater, screen 各々の役割・関係，の概要。

== 1. simulation 実行時

      simulation の末端(=node)から，watson までの道のりを図で解説。

==============================================================================
Fig A.
        node: thread
    darkness: process
      client: process
      watson: process

    A: queue object
    B: sqlite3 database
    C: TCP/IP connection

                                                        simulation.db
                                                             ^
                                                             |
                                                             |
    <node> --+--A--> [darkness] --+--B--> [client] --C--> [watson]
             |                    |                        ^ ^ ^
    <node> --+                    |                        | | |
             |                    |                        | | |
    <node> --+                    |                        | | |
             |                    |                        | | |
    ...      ~                    |                        | | |
                                  |                        | | |
    <node> --+--A--> [darkness] --+                        | | |
             |                    |                        | | |
    <node> --+                    |                        | | |
             |                    |                        | | |
    <node> --+                    |                        | | |
             |                    |                        | | |
    ...      ~                    ~                        | | |
                                                           | | |
    <node> --+--A--> [darkness] --+--B--> [client] --C-----+ | |
             |                    |                          | |
    ...      ~                    ~                          | |
                                                             | |
    <node> --+--A--> [darkness] --+--B--> [client] --C-------+ |
             |                    |                            |
    ...      ~                    ~                            ~

==============================================================================
Text B.
        node belongs a queue   object.
    darkness has     a queue   object.
      client has     a sqlite3 database.
      watson has  many TCP/IP  connections.
      watson makes   a sqlite3 database as simulation.db.

    darkness share a queue object with some nodes.
    client share a sqlite3 database with some darknesses.
    watson share a TCP/IP connection with per client.

==============================================================================

    watson は、simulation 時に、ただ一つのみ存在する。
    simulation に参加する端末毎に、一つの client を持つ。
    client は、複数の darkness processes を生成する。
    darkness は、複数の node threads を生成する。
    node は、simulation 時に、実際に simulation を実行する。

    node は darkness と _queue_darkness という Queue() を共有。
    node の状態が変化したら、_queue_darkness() に書き込む。

    darkness は client と client.N.db を共有。
    darkness が、_queue_darkness() の内容を client.N.db に書き込む。

    client は client.N.db を watson へ送信する。
    そう、client って必要なくない？darkness に送信の役割も任せてしまって
    良くない？
    いえ、client は必要なのです。

    watson は client.N.db を client から受信し保存する。
    watson は client.N.db を統合して，
    今回の simulation 結果を保存する simulation.db を作成する。

== 2. simulation 結果描画時

      theater.py 内での、simulation.db から，simulation 結果描画までの道のり。

      詳細は、 screen.py の説明を参照されたし。それなりに複雑です。

      簡単には、screen.py は，simulation.db を読み込んで，memory_db を作成し，
    memory_db の内容を OpenGL figure に変換し，OpenGL figure を描写し、
    simulation 結果を描画する。

= simulation 実行時の役割・関係詳細

== node.py
      umatobi/simulator/node.py Node.run() にて，node に関する各情報(id, host,
    port, key, rad, x, y, status) を dict に詰めて，その dict を pickle 化し
    ている。
      そして，pickle と elapsed_time(=et) を 1 tuple として，node が darkness
    と共有する _queue_darkness に tuple を put() している。

== darkness.py
      node が _queue_darkness へ put() した tuple(=et, pickle) を，darkness
    は _queue_darkness から get() して， client.N.db 上の growings table に
    elapsed_time,pickle を insert する。

== client.py
    することなくない？ darkness が client.N.db 操作してるし。。。
    client.py 読んでてビックリしたよ。
    darkness 起動後の 主な仕事は watson とのやり取り。
    darkness 終了させるのが主な任務か。
    そして，client.N.db を watson へ送信するのが重要な任務だ。

== watson.py
      client からの client.N.db を受信して，
    client.N.db => simulation.db への統合が任務かな？
    今は，tools/make_simulation_db.py で
    watson_make_simulation_db() を実行して，
    simulation.db を作成しているけど。

== theater.py
      どの simulation を表示するかを受け取る。
    そして、screen.py にどの simulation.db を描画するか伝える。

      Trailer もあるよ。

== screen.py
      theater.py の指定する simulation.db を読み込んで、simulation 結果を描画す
    る。

=== display_main_thread
      display_main_thread は、simulation 結果を描画する役割を担う。
      その役割は、ManipulatingDB thred と共有する、node_squares, green_squares,
    node_legs object から OpenGL figure を読み込み、glut の buffer に
    OpenGL figure を書き込む事によって、果たされる。
      また、display_main_thread は、ManipulatingDB thread を持つ。

=== ManipulatingDB thread
      ManipulatingDB thread は、simulation 開始から現在までの経過秒数を計る。
    そして、前回の検索から現在までに状態が変化した node のみの records を
    simulation.db から検索し、records を得る。
      その records に関する、node の状態を ":memory:" db に書き込み、状態の変化
    した node に限り、現在の状態を更新する。この更新により、":memory:" db 上の
    node の状態は、常に最新に保たれる。
      そして、":memory:" db 上の全ての node の状態を records として取得し、
    OpenGL figure を計算する。そして、その計算した OpenGL figure を、
    display_main_thread と共有する、node_squares, green_squares, node_legs
    に書き込む。
      また、ManipulatingDB thread は、LabelArea Thread を持つ。

=== LabelArea thread
    LabelArea Thread は、simulation を文字列で表示する役割を担う。
